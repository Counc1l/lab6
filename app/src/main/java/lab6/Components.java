/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab6;
import java.util.Stack;
import java.util.Scanner;
import java.io.File;
import java.io.FileReader;
import java.io.FileNotFoundException;

public class Components {
    public static void main(String[] args) {
        try {
            File f = new File(args[0]);
            Scanner sc = new Scanner(f);

            int size = sc.nextInt();
            boolean[][] adjacencyMatrix = new boolean[size][size];

            int first;
            int second;
            while (sc.hasNext()) {
                first = sc.nextInt();
                second = sc.nextInt();

                adjacencyMatrix[first][second] = true;
                adjacencyMatrix[second][first] = true;
            }

            boolean[] visited = new boolean[size];
            int connections = 0;

            for (int i = 0; i < size; ++i) {
                if (!visited[i]) {
                    search(i, adjacencyMatrix, visited);
                    ++connections;
                }
            }

            System.out.println(connections);

        } catch (FileNotFoundException exc) {
            System.out.println("File not found: " + args[0]);
        }
    }

    // Perform a depth first search (Used my Father for the idea and pseudocode)
    private static void search(int node, boolean[][] matrix, boolean[] visited) {
        Stack<Integer> st = new Stack<>();
        st.push(node);

        while (!st.isEmpty()) {
            int curNode = st.pop();

            if (!visited[curNode]) {
                visited[curNode] = true;

                for (int i = 0; i < matrix.length; ++i) {
                    if (matrix[curNode][i] && !visited[i]) {
                        st.push(i);
                    }
                }
            }
        }
    }
}
